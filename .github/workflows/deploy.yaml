name: "Deploy"

concurrency:
  group: queue

on:
  release:
    types: [published]

jobs:
  information:
    name: "‚ÑπÔ∏è Gather add-on information"
    runs-on: ubuntu-latest
    outputs:
      architectures: ${{ steps.information.outputs.architectures }}
      base_image_signer: ${{ steps.information.outputs.codenotary_base_image }}
      build: ${{ steps.information.outputs.build }}
      description: ${{ steps.information.outputs.description }}
      environment: ${{ steps.release.outputs.environment }}
      name: ${{ steps.information.outputs.name }}
      signer: ${{ steps.information.outputs.codenotary_signer }}
      slug: ${{ steps.override.outputs.slug }}
      target: ${{ steps.information.outputs.target }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: "Checkout the repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "üöÄ Run add-on information action"
        id: information
        uses: frenck/action-addon-information@v1.4.2

      - name: "üöÄ Process possible slug override"
        id: override
        run: |
          echo "slug=hassio-rclone-backup" >> "$GITHUB_OUTPUT"

      - name: "‚ÑπÔ∏è Gather version and environment"
        id: release
        run: |
          version="${{ github.event.release.tag_name }}"
          version="${version,,}"
          version="${version#v}"
          echo "version=${version}" >> "$GITHUB_OUTPUT"

  deploy:
      name: "üë∑ Build & Deploy ${{ matrix.architecture }}"
      needs: information
      runs-on: ubuntu-latest
      strategy:
        matrix:
          architecture: ${{ fromJson(needs.information.outputs.architectures) }}
      steps:
        - name: "Checkout the repository"
          uses: actions/checkout@v4

        - name: "üèó Set up build cache"
          id: cache
          uses: actions/cache@v4.0.2
          with:
            path: /tmp/.docker-cache
            key: docker-${{ matrix.architecture }}-${{ github.sha }}
            restore-keys: |
              docker-${{ matrix.architecture }}
        - name: "üèó Set up QEMU"
          uses: docker/setup-qemu-action@v3.0.0

        - name: "üèó Set up Docker Buildx"
          uses: docker/setup-buildx-action@v3.3.0

        - name: "‚ÑπÔ∏è Compose build flags"
          id: flags
          run: |
            echo "date=$(date +"%Y-%m-%dT%H:%M:%SZ")" >> "$GITHUB_OUTPUT"
            from=$(yq --no-colors eval ".build_from.${{ matrix.architecture }}" "${{ needs.information.outputs.build }}")
            echo "from=${from}" >> "$GITHUB_OUTPUT"

            if [[ "${{ matrix.architecture}}" = "amd64" ]]; then
              echo "platform=linux/amd64" >> "$GITHUB_OUTPUT"
            elif [[ "${{ matrix.architecture }}" = "i386" ]]; then
              echo "platform=linux/386" >> "$GITHUB_OUTPUT"
            elif [[ "${{ matrix.architecture }}" = "armhf" ]]; then
              echo "platform=linux/arm/v6" >> "$GITHUB_OUTPUT"
            elif [[ "${{ matrix.architecture }}" = "armv7" ]]; then
              echo "platform=linux/arm/v7" >> "$GITHUB_OUTPUT"
            elif [[ "${{ matrix.architecture }}" = "aarch64" ]]; then
              echo "platform=linux/arm64/v8" >> "$GITHUB_OUTPUT"
            else
              echo "::error ::Could not determine platform for architecture ${{ matrix.architecture }}"
              exit 1
            fi

        - name: "Login to GitHub Container Registry"
          uses: docker/login-action@v3.2.0
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: "‚§µÔ∏è Download base image"
          if: steps.flags.outputs.from != 'null'
          run: docker pull "${{ steps.flags.outputs.from }}"

        - name: "üöÄ Build"
          uses: docker/build-push-action@v6.1.0
          with:
            push: true
            tags: |
              ghcr.io/${{ github.repository_owner }}/${{ needs.information.outputs.slug }}/${{ matrix.architecture }}:latest
              ghcr.io/${{ github.repository_owner }}/${{ needs.information.outputs.slug }}/${{ matrix.architecture }}:${{ needs.information.outputs.version }}
            context: ${{ needs.information.outputs.target }}
            file: ${{ needs.information.outputs.target }}/Dockerfile
            cache-from: |
              type=local,src=/tmp/.docker-cache
              ghcr.io/${{ github.repository_owner }}/${{ needs.information.outputs.slug }}/${{ matrix.architecture }}:edge
            cache-to: type=local,mode=max,dest=/tmp/.docker-cache-new
            platforms: ${{ steps.flags.outputs.platform }}
            build-args: |
              BUILD_ARCH=${{ matrix.architecture }}
              BUILD_DATE=${{ steps.flags.outputs.date }}
              BUILD_DESCRIPTION=${{ needs.information.outputs.description }}
              BUILD_FROM=${{ steps.flags.outputs.from }}
              BUILD_NAME=${{ needs.information.outputs.name }}
              BUILD_REF=${{ github.sha }}
              BUILD_REPOSITORY=${{ github.repository }}
              BUILD_VERSION=${{ needs.information.outputs.version }}

        # This ugly bit is necessary, or our cache will grow forever...
        # Well until we hit GitHub's limit of 5GB :)
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        - name: "üöö Swap build cache"
          run: |
            rm -rf /tmp/.docker-cache
            mv /tmp/.docker-cache-new /tmp/.docker-cache
